name: Setup EKS cluster

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: Environment you want to deploy in
        options:
          - dev
          - uat
          - prod

      action:
        type: choice
        required: true
        description: create or destroy
        options:
          - create/update
          - destroy

permissions:
  id-token: write
  contents: write
  actions: read

run-name: "${{ github.event.inputs.environment }} EKS Cluster Setup (Mode: ${{ github.event.inputs.action }})"

jobs:
  TerraformPlan:
    name: Terraform Plan (${{ github.event.inputs.action }})
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() }}
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: infra-setup
    outputs:
      tfExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Login into AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE}}
          role-session-name: GitHub_and_AWS_OIDC_session
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.4"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Load tfvars
        run: |
          aws ssm get-parameter --name '${{ vars.TF_BACKEND }}' | jq -r '.Parameter.Value' > tfbackend.conf
          aws ssm get-parameter --name '${{ vars.TF_VARS }}' | jq -r '.Parameter.Value' > terraform.tfvars

      - name: Terraform Init
        run: terraform init -backend-config=tfbackend.conf

      - name: Terraform Plan
        id: tf-plan
        run: |
          if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform plan -destroy -detailed-exitcode -no-color -out tfplan
          else
            terraform plan -detailed-exitcode -no-color -out tfplan
          fi

          TF_EXIT_CODE=$?
          echo "TF_EXIT_CODE=$TF_EXIT_CODE" >> $GITHUB_ENV
          echo "exitcode=$TF_EXIT_CODE" >> $GITHUB_OUTPUT

          if [[ $TF_EXIT_CODE -eq 1 ]]; then
            echo Terraform Plan Failed!
            exit 1
          else
            echo $TF_EXIT_CODE
            exit 0
          fi

      - name: Print ExitCode
        run: |
          echo "Exit code was $TF_EXIT_CODE"

      - name: Create String Output
        id: tf-plan-output
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          {
          echo "summary<<${delimiter}"
          echo "## ‚úÖ Terraform Plan Summary"
          echo ""
          echo "<details><summary>üîç Click to expand plan details</summary>"
          echo ""
          echo '```hcl'
          echo "$TERRAFORM_PLAN"
          echo '```'
          echo "</details>"
          echo "${delimiter}"
          } >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-output.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
